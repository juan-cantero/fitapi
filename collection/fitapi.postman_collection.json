{
	"info": {
		"_postman_id": "fitapi-collection",
		"name": "FitAPI",
		"description": "Fitness API with Supabase Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Smart token caching - only generate when expired",
					"const { execSync } = require('child_process');",
					"const fs = require('fs');",
					"const path = require('path');",
					"",
					"const tokenCachePath = '/home/juanqui/Development/personal/go/fitapi/.token_cache.json';",
					"",
					"try {",
					"    let needNewToken = true;",
					"    ",
					"    // Check if we have a cached token",
					"    if (fs.existsSync(tokenCachePath)) {",
					"        const cached = JSON.parse(fs.readFileSync(tokenCachePath, 'utf-8'));",
					"        const expiresAt = new Date(cached.expires_at * 1000); // Convert to milliseconds",
					"        const now = new Date();",
					"        ",
					"        // Add 5 minute buffer before expiration",
					"        const bufferMs = 5 * 60 * 1000;",
					"        ",
					"        if (expiresAt.getTime() - now.getTime() > bufferMs) {",
					"            pm.collectionVariables.set('auth_token', cached.access_token);",
					"            console.log('✅ Using cached token (expires in ' + Math.round((expiresAt - now) / 1000 / 60) + ' minutes)');",
					"            needNewToken = false;",
					"        } else {",
					"            console.log('⏰ Cached token expired or expiring soon, generating new one...');",
					"        }",
					"    }",
					"    ",
					"    // Generate new token if needed",
					"    if (needNewToken) {",
					"        const output = execSync('cd /home/juanqui/Development/personal/go/fitapi && go run cmd/gettoken/main.go', {",
					"            encoding: 'utf-8',",
					"            stdio: ['pipe', 'pipe', 'pipe']",
					"        });",
					"        ",
					"        const response = JSON.parse(output);",
					"        ",
					"        // Cache the token with expiration",
					"        fs.writeFileSync(tokenCachePath, JSON.stringify(response, null, 2));",
					"        ",
					"        pm.collectionVariables.set('auth_token', response.access_token);",
					"        console.log('✅ New auth token generated and cached (expires in ' + response.expires_in + ' seconds)');",
					"    }",
					"} catch (error) {",
					"    console.error('❌ Failed to get auth token:', error.message);",
					"    console.error('Make sure the API server can connect to Supabase');",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "Health Check",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": ["{{base_url}}"],
					"path": ["health"]
				},
				"description": "Public endpoint to check API and database connectivity"
			},
			"response": []
		},
		{
			"name": "Get Current User",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/me",
					"host": ["{{base_url}}"],
					"path": ["api", "me"]
				},
				"description": "Protected endpoint that returns the authenticated user's information"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		}
	]
}
